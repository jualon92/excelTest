import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import styles from "../styles/Home.module.css";
import PersonAddIcon from "@mui/icons-material/PersonAdd";
import { LoadingButton } from "@mui/lab";
import CloudUploadIcon from "@mui/icons-material/CloudUpload";
import { useEffect, useState } from "react";
import { Persona } from "../utils/interfaces";
//@ts-ignore
import * as XLSX from "xlsx";
import { PersonasSchemaValidation } from "../utils/validation";
import useNotification from "../lib/useSnackbar";
import { map, tail, times, uniq } from "lodash";
import _ from "lodash";

export default function Home() {
  const [loading, setLoading] = useState(false);
  const [sheet, setSheet] = useState<Persona[]>([]);
  const [msg, sendNotification] = useNotification();

  const getJSONFromSheet = (e) => {
    const bufferArray = e?.target.result;
    const wb = XLSX.read(bufferArray, { type: "buffer" });
    const wsname = wb.SheetNames[0];
    const ws = wb.Sheets[wsname];

    return XLSX.utils.sheet_to_json(ws);
  };

  const readExcel = async (file: any) => {
    const fileReader = new FileReader();
    fileReader.readAsArrayBuffer(file);

    fileReader.onload = async (e: any) => {
      const rawData = getJSONFromSheet(e);
      try {
        const data = await PersonasSchemaValidation.validate(rawData).then(
          (r) => console.log(r)
        );

        console.log("pepes")
        const duplicates = _(rawData)
          .filter((i) => !isNaN(i.id))
          .groupBy("id")
          .filter((o) => o.length > 1) // remove groups that have less than two members
          .map(x => ({
            id: x[0].id,
            first_name: x[0].first_name,
            last_name: x[0].last_name, 
            amount: _.sumBy(x, x => x.amount)
          }))
          .value();

         console.log("duplicates", duplicates)
         const elementsWithNoID = rawData.filter(e => e.id === undefined)
         console.log("elements with no id",  elementsWithNoID)
          

        sendNotification({
          msg: `subida exitosamente.`,
          variant: "success",
        });
      } catch (err) {
        sendNotification({
          msg: `formato de tabla incorrecto`,
          variant: "error",
        });
      }
    };
  };

  const handleOnSubmit = async (e: React.ChangeEvent<HTMLInputElement>) => {
    readExcel(e.target.files?.[0]);
  };

  return (
    <>
      <Head>
        <title>Excel</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <h1>hola mundo</h1>

        <LoadingButton
          sx={{
            minHeight: "41px",
            border: "1px solid transparent",
          }}
          loading={loading}
          loadingPosition="start"
          startIcon={<CloudUploadIcon />}
          variant="contained"
          component="label"
        >
          UPLOAD EXCEL SHEET
          <input
            onChange={(e) => handleOnSubmit(e)}
            hidden
            accept=".xlsx"
            multiple
            type="file"
          />
        </LoadingButton>
      </main>
    </>
  );
}
